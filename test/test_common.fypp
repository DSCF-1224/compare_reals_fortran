#:include "../src/compare_reals_fortran_common.fypp"
#:mute

#:set LIST_SET_VALUE_STATEMENT = &
    [ &
        "set_ieee_negative_inf"          , &
        "set_negative_huge"              , &
        "set_negative_huge_next_up"      , &
        "set_negative_one_next_down"     , &
        "set_negative_one"               , &
        "set_negative_one_next_up"       , &
        "set_negative_epsilon_next_down" , &
        "set_negative_epsilon"           , &
        "set_negative_epsilon_next_up"   , &
        "set_negative_tiny_next_down"    , &
        "set_negative_tiny"              , &
        "set_negative_tiny_next_up"      , &
        "set_positive_tiny_next_down"    , &
        "set_positive_tiny"              , &
        "set_positive_tiny_next_up"      , &
        "set_ieee_negative_zero"         , &
        "set_ieee_positive_zero"         , &
        "set_positive_tiny"              , &
        "set_positive_epsilon"           , &
        "set_positive_one"               , &
        "set_positive_huge_next_down"    , &
        "set_positive_huge"              , &
        "set_ieee_positive_inf"            &
    ]

#:if TARGET_INTERFACE == 0
    #:set INTERFACE_NAME = "intrinsic"
#:elif TARGET_INTERFACE == 1
    #:set INTERFACE_NAME = "eq_transfer"
#:elif TARGET_INTERFACE == 2
    #:set INTERFACE_NAME = "is_contained_by_next_out"
#:elif TARGET_INTERFACE == 3
    #:set INTERFACE_NAME = "le_and_ge"
#:else
    #:stop "Wrong `TARGET_INTERFACE` mode {}!".format(TARGET_INTERFACE)
#:endif

#:set PROGRAM_NAME = "test_" + INTERFACE_NAME

#:endmute
program ${PROGRAM_NAME}$

    use, intrinsic :: iso_fortran_env, only: error_unit
    #:for KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${KIND}$
    #:endfor

    #:if INTERFACE_NAME != "intrinsic"
    use, non_intrinsic :: compare_reals_fortran, only: ${INTERFACE_NAME}$
    #:endif

    use, non_intrinsic :: compare_reals_fortran_support
    use, non_intrinsic :: ieee_class_fortran


    implicit none


    #:for KIND in REAL_KINDS
    call test_${KIND}$
    #:endfor

    #:if INTERFACE_NAME != "intrinsic"
    print *, "OK; ${INTERFACE_NAME}$"
    #:elif INTERFACE_NAME == "intrinsic"
    print *, "OK; .eq."
    #:else
        #:stop "Unsupported interface name: `{}` is detected.".format(INTERFACE_NAME)
    #:endif


    contains
    #:for KIND in REAL_KINDS


    #:set SUBROUTINE_NAME = "test_" + KIND
    subroutine ${SUBROUTINE_NAME}$
        #:for SET_VALUE_STATEMENT_X in LIST_SET_VALUE_STATEMENT
        #:for SET_VALUE_STATEMENT_Y in LIST_SET_VALUE_STATEMENT

        block

            real(${KIND}$) :: x, y

            call ${SET_VALUE_STATEMENT_X}$(x)
            call ${SET_VALUE_STATEMENT_Y}$(y)

            #:mute

                #:if SET_VALUE_STATEMENT_X == SET_VALUE_STATEMENT_Y
                    #:set FLAG = ".not. "
                #:elif ("zero" in SET_VALUE_STATEMENT_X) and ("zero" in SET_VALUE_STATEMENT_Y)
                    #:set FLAG = ".not. "
                #:else
                    #:set FLAG = ""
                #:endif

            #:endmute
            #:if INTERFACE_NAME != "intrinsic"
            if ( ${FLAG}$${INTERFACE_NAME}$(x,y) ) then
            #:elif INTERFACE_NAME == "intrinsic"
            if ( ${FLAG}$ x .eq. y ) then
            #:else
                #:stop "Unsupported interface name: `{}` is detected.".format(INTERFACE_NAME)
            #:endif
                write( unit = error_unit , fmt = "(A,1X,A30,A1)" , advance = "no" ) "x value;", "${SET_VALUE_STATEMENT_X}$", ";"
                write( unit = error_unit , fmt = *                                )  x
                write( unit = error_unit , fmt = "(A,1X,A30,A1)" , advance = "no" ) "y value;", "${SET_VALUE_STATEMENT_Y}$", ";"
                write( unit = error_unit , fmt = *                                )  y
                write( unit = error_unit , fmt = "(A)"                            ) "NG; ${INTERFACE_NAME}$"
                error stop
            end if
            #:del FLAG

        end block

        #:endfor
        #:endfor
    end subroutine ${SUBROUTINE_NAME}$
    #:del SUBROUTINE_NAME

    #:endfor
end program ${PROGRAM_NAME}$

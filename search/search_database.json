var tipuesearch = {"pages":[{"title":" compare_reals_fortran ","text":"compare_reals_fortran","tags":"home","url":"index.html"},{"title":"le_and_ge – compare_reals_fortran","text":"public interface le_and_ge return (x .le. y) .and. (x .ge. y) Functions private pure elemental module function le_and_ge_real128(x, y) result(is_equal) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x real(kind=real128), intent(in) :: y Return Value logical private pure elemental module function le_and_ge_real32(x, y) result(is_equal) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x real(kind=real32), intent(in) :: y Return Value logical private pure elemental module function le_and_ge_real64(x, y) result(is_equal) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x real(kind=real64), intent(in) :: y Return Value logical","tags":"","url":"interface/le_and_ge.html"},{"title":"compare_reals_fortran – compare_reals_fortran","text":"Uses iso_fortran_env Used by Descendants: compare_reals_fortran_le_and_ge Interfaces public        interface le_and_ge return (x .le. y) .and. (x .ge. y) private pure elemental module function le_and_ge_real128(x, y) result(is_equal) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x real(kind=real128), intent(in) :: y Return Value logical private pure elemental module function le_and_ge_real32(x, y) result(is_equal) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x real(kind=real32), intent(in) :: y Return Value logical private pure elemental module function le_and_ge_real64(x, y) result(is_equal) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x real(kind=real64), intent(in) :: y Return Value logical","tags":"","url":"module/compare_reals_fortran.html"},{"title":"compare_reals_fortran_le_and_ge – compare_reals_fortran","text":"Uses Ancestors: compare_reals_fortran","tags":"","url":"module/compare_reals_fortran_le_and_ge.html"},{"title":"compare_reals_fortran_le_and_ge.f90 – compare_reals_fortran","text":"Source Code submodule ( compare_reals_fortran ) compare_reals_fortran_le_and_ge implicit none contains module procedure le_and_ge_real32 is_equal = ( x . le . y ) . and . ( x . ge . y ) end procedure le_and_ge_real32 module procedure le_and_ge_real64 is_equal = ( x . le . y ) . and . ( x . ge . y ) end procedure le_and_ge_real64 module procedure le_and_ge_real128 is_equal = ( x . le . y ) . and . ( x . ge . y ) end procedure le_and_ge_real128 end submodule compare_reals_fortran_le_and_ge","tags":"","url":"sourcefile/compare_reals_fortran_le_and_ge.f90.html"},{"title":"compare_reals_fortran.f90 – compare_reals_fortran","text":"Source Code module compare_reals_fortran use , intrinsic :: iso_fortran_env , only : real32 use , intrinsic :: iso_fortran_env , only : real64 use , intrinsic :: iso_fortran_env , only : real128 implicit none private public :: le_and_ge interface le_and_ge !! version: experimental !! !! return `(x .le. y) .and. (x .ge. y)` module pure elemental logical function le_and_ge_real32 ( x , y ) result ( is_equal ) real ( real32 ), intent ( in ) :: x , y end function le_and_ge_real32 module pure elemental logical function le_and_ge_real64 ( x , y ) result ( is_equal ) real ( real64 ), intent ( in ) :: x , y end function le_and_ge_real64 module pure elemental logical function le_and_ge_real128 ( x , y ) result ( is_equal ) real ( real128 ), intent ( in ) :: x , y end function le_and_ge_real128 end interface le_and_ge end module compare_reals_fortran","tags":"","url":"sourcefile/compare_reals_fortran.f90.html"}]}